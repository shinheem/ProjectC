/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.78
 * Generated at: 2023-09-18 05:49:12 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.admin;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.oreilly.servlet.multipart.DefaultFileRenamePolicy;
import com.oreilly.servlet.MultipartRequest;
import dto.ClothesDto;
import dao.ClothesDao;

public final class clothesInsertAction_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.oreilly.servlet.multipart.DefaultFileRenamePolicy");
    _jspx_imports_classes.add("dao.ClothesDao");
    _jspx_imports_classes.add("com.oreilly.servlet.MultipartRequest");
    _jspx_imports_classes.add("dto.ClothesDto");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

    request.setCharacterEncoding("UTF-8");

    // 업로드 경로 설정 (path 변수에 업로드할 경로를 지정하세요)
    String path = "F:/upload"; // 예: "C:/uploads"
    int size = 10 * 1024 * 1024; // 최대 업로드 크기 (10MB)

    // MultipartRequest를 사용하여 파일 업로드 처리
    MultipartRequest multiRequest = new MultipartRequest(
        request,        // 원래의 요청 객체
        path,           // 업로드 경로
        size,           // 파일 최대 크기
        "UTF-8",        // 파일명 인코딩
        new DefaultFileRenamePolicy() // 중복된 파일 이름 변경 정책
    );

    // 사용자로부터 입력받은 상품 정보
    String clothesKind = multiRequest.getParameter("clothesKind");
    String price2 = multiRequest.getParameter("price2");
    String clothesName = multiRequest.getParameter("clothesName");
    
    String clothesContent = multiRequest.getParameter("clothesContent");
    String clothesImage = multiRequest.getFilesystemName("clothesImage"); // 파일 업로드된 이미지 파일명
    String clothesCount = multiRequest.getParameter("clothesCount");
    String useyn = multiRequest.getParameter("useyn");
    String typeNum = multiRequest.getParameter("typeNum");

    // ClothesDto 객체 생성
    ClothesDto dto = new ClothesDto();
    dto.setClothesKind(clothesKind);
    dto.setPrice2(Integer.parseInt(price2));
    dto.setClothesName(clothesName);
    dto.setClothesContent(clothesContent);
    dto.setClothesImage(clothesImage);
    dto.setClothesCount(Integer.parseInt(clothesCount));
    dto.setUseyn(useyn);
    dto.setTypeNum(Integer.parseInt(typeNum));

    // clothesNum 설정
    dto.setClothesNumByType();

    // ClothesDao 객체 생성
    ClothesDao dao = ClothesDao.getInstance();
	int result = dao.insert(dto);
   
	if(result == 1) {

      out.write("\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("    // 글 등록 완료 메시지를 표시하고 목록 페이지로 리다이렉트\n");
      out.write("    alert('상품 등록이 완료되었습니다.');\n");
      out.write("    location.href = 'clothesList.jsp';\n");
      out.write("</script>\n");

	}

      out.write("\n");
      out.write("<!-- 추가: clothesKind 선택이 변경되었을 때 typeNum을 업데이트하는 JavaScript 코드 -->\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("    document.getElementById(\"clothesKind\").addEventListener(\"change\", function() {\n");
      out.write("        var selectedClothesKind = this.value;\n");
      out.write("        document.getElementById(\"typeNum\").value = selectedClothesKind;\n");
      out.write("    });\n");
      out.write("</script>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
