package filter;

import java.io.IOException;
import java.util.List;

import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.annotation.WebFilter;
import javax.servlet.http.HttpFilter;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import dto.CustomerDto;

//SessionFilter 구현하기
//: 메뉴로 클릭해서 사용자 기능을 사용하는 것이 정상이지만
// 어떤 사용자는 아무 의미 없이 장난으로 (또는 나쁜 의도로) url에 직접 주소를 입력해서 실행할 수도 있기 때문
// 잘못된 요청을 받지 않도록 session 검사를 하기 위한 필터를 구현해봅니다.

// 로그인 했을 때 접근할 수 없는 url은 index.jsp로 리다이렉트
// 로그인 안했을 때 접근할 수 없는 url은 index.jsp로 리다이렉트


//*.jsp 와 같은 url 형식인 모든 요청에 대해 처리될 필터입니다.
@SuppressWarnings("serial")
@WebFilter(urlPatterns = {"*.jsp"})
public class SessionFilter extends HttpFilter implements Filter {
	//필터 동작을 확인하기 위한 로그 남기기 : getLogger 메소드의 인자는 클래스를 전달
	private static final Logger logger = LoggerFactory.getLogger(SessionFilter.class);
	
	//필터 동작을 정의할 메소드
	
	  public void doFilter(ServletRequest req, ServletResponse resp, FilterChain
	  chain) throws IOException, ServletException {
		  
	  
	 //메소드의 인자로 전달된 것이 HttpXXX의 부모 인터페이스이므로 캐스팅이 필요합니다.
	  HttpServletRequest request = (HttpServletRequest) req; HttpServletResponse
	  response = (HttpServletResponse) resp;
	  
	  //getContextPath()는 /jspBoard 를 리턴,
	  //getServletPath()는 뒤에 나오는 url 요청주소
	  logger.info("::::: 요청 전 session filter : {}", request.getServletPath());
	  
	  //로그인이 되었을 때는 접근이 안되고, 로그인이 안된 상태일 때만 접근이 되는 url 경로  
	  //얘시 : 로그인, 회원가입
	  
	  List<String> nossesions = List.of("login.jsp","/member/join.jsp");
	  HttpSession session = request.getSession();
	  CustomerDto user = (CustomerDto)session.getAttribute("id");
	  if(nossesions.contains(request.getServletPath()) && user != null) {
		  //요청경로가 nosessions 중에 하나이고 로그인이 되었다면 접근 못함.
		  // contextPath로 강제 리다이렉트
		  response.sendRedirect(request.getContextPath());
		  return;
	  }
	  
	  //로그인이 필수인 요청 경로
	  List<String> logins = List.of("/community/write.jsp","/community/writeAction.jsp", "/community/update.jsp", "/community/updateAction.jsp","/community/logout.jsp");
	 
	  if(logins.contains(request.getServletPath()) && user == null) {
		  //요청경로가 nosessions 중에 하나이고 로그인이 되었다면 접근 못함.
		  // contextPath로 강제 리다이렉트
		  response.sendRedirect(request.getContextPath());
		  return;
	  }
	  
	  //post 방식 요청에 대한 확인 : (로그인은 했지만)
	  //예시 http://localhost:8081/jspBoard/loginAction.jsp?id=sana&password=1234 가 실행되지 않도록 함.
	  List<String> posts = List.of("/community.writeAction.jsp","cpmmunity.updateAction.jsp");
	  // -> 하나씩 정의하기 번거롭다면...
	  if(request.getServletPath().contains("Action.jsp") && request.getMethod().equals("GET")) {
		  //요청경로가 nosessions 중에 하나이고 로그인이 되었다면 접근 못함.
		  // contextPath로 강제 리다이렉트
		  response.sendRedirect("error.jsp");
		  return;
	  }
	  
	  //다음 필터가 있으면 요청(또는 응답)을 전달하고 없으면 요청(또는 응답)합니다. 
	  chain.doFilter(request,response);
	  }
}